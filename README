PREREQUISITES

    Use brew install to install at least following modules

        php55 php55-memcache memcached mysql
        # start memcached and mysql as instructed

    See https://github.com/josegonzalez/homebrew-php how to brew php.

SEARCHREPLACEDB2

    In project repository root is searchreplacedb2.php tool for doing
    search and replace to database content. This is used to rewrite URLs
    stored in the database, possibly in PHP serialized format. Start
    the server with command:

        php -S localhost:5999 -t .

    This tool has nothing application specific: it's just a database
    connecting sofware written in PHP. You can leave it running etc.

CREATING A NEW PROJECT

    git clone TEMPLATEREPOURL PROJECTNAME
    cd PROJECTNAME
    rm -rf .git
    git init
    git add -A
    git commit -m 'import template'
    git remote add origin MYPROJECTREPOURL
    git push -u origin master

LOCAL SYSTEM ENVIRONMENT

    Define your environment variables. For example, put this to file ".env"
    (git ignored) in project root.

        CLEARDB_DATABASE_URL=mysql://root:@localhost/DATABASENAME
        WP_CACHE=true
        MEMCACHIER_SERVERS=localhost:11211

    In every terminal used to run the server:

        export `cat .env`

INITIAL LOCAL SETUP

    Create mysql database, install WP, start the server and setup

        mysqladmin -uroot create DATABASENAME
        curl http://wordpress.org/latest.tar.gz | tar xz -C config/public
        php -S localhost:5000 -t config/public
        open http://localhost:5000

AMAZON S3 SETUP

    Request an IAM user to access the shared bucket BUCKETNAME
    User policy:

        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "s3:*",
                    "Resource": "arn:aws:s3:::BUCKETNAME/PROJECTNAME/*"
                }
            ]
        }

    Activate WPRO plugin and configure (Settings / WPRO Settings):

        Prepend all paths with folder: PROJECTNAME/staging
        AWS Key & AWS Secret: as per created IAM user
        S3 Bucket: BUCKETNAME
        [x] Virtual hosting is enabled for this bucket.
        Bucket AWS Region: EU (Ireland) Region

    Test by uploading a new media, and see that the image URL contains
    BUCKETNAME.

CREATING A NEW HEROKU APP

    heroku create --region eu --buildpack https://github.com/frc/heroku-buildpack-wordpress PROJECTNAME
    heroku config:set WORDPRESS_DIR=wordpress WORDPRESS_VERSION=3.7.1
    heroku labs:enable user-env-compile
    git push heroku master

DEPLOYING TO AN EXISTING HEROKU APP

    git remote set-url heroku git@heroku.com:PROJECTNAME.git
    git push heroku master

POPULATING THE REMOTE DATABASE

    Dump your local database to CLEARDB
        heroku config:get CLEARDB_DATABASE_URL
        mysqldump -uroot DATABASENAME >/tmp/DATABASENAME.sql
        mysql -uxxx -pxxx -hxxx heroku_xxx </tmp/DATABASENAME.sql ## see config above

    Migrate database URLs
        open http://localhost:5999/searchreplacedb2.php
        ## specify CLEARDB database connection info
        ## replace localhost:5000 with HEROKUAPPURL

    Flush the memcached
        heroku addons:open memcachier

POPULATING THE LOCAL DATABASE

    Dump CLEARDB to your local database
        heroku config:get CLEARDB_DATABASE_URL
        mysqldump -uxxx -pxxx -hxxx heroku_xxx >/tmp/DATABASENAME.sql ## see config above
        mysql -uroot DATABASENAME </tmp/DATABASENAME.sql

    Migrate database URLs
        open http://localhost:5999/searchreplacedb2.php
        ## specify LOCAL database connection info
        ## replace HEROKUAPPURL with localhost:5000

    Flush the memcached
        ## see "brew info memcached" for details

NORMAL DEVELOPMENT CYCLE

    1. Clone the repository for local development.

    2. Import database from heroku to localhost. See "POPULATING THE LOCAL DATABASE".

    3. Develop on localhost, commit, and push to heroku for staging.

DEPLOYMENT TO PRODUCTION

    0. Deploy to heroku and copy production database (if available and necessary)
    to staging. This is done to verify that the latest code runs with the latest
    database.

        heroku config:get CLEARDB_DATABASE_URL --app PROJECTNAME-production # xxx
        heroku config:get CLEARDB_DATABASE_URL --app PROJECTNAME            # yyy
        mysqldump -uxxx -pxxx -hxxx xxx | mysql -uyyy -pyyy -hyyy yyy
        open http://localhost:5999/searchreplacedb2.php
        ## specify the STAGING database connection info
        ## replace HEROKUPRODUCTIONAPPURL with HEROKUSTAGINGAPPURL

    1. Create a new local clone to directory "PROJECTNAME-production".

    2. Setup the Heroku application, see above. Use heroku application name
    "PROJECTNAME-production" instead.

    3. Provision a bigger (1GB) database and copy content from the staging database

        heroku addons:add cleardb:punch --fork=`heroku config:get CLEARDB_DATABASE_URL --app PROJECTNAME`
        # it takes some time for forked data to appear

    4. Migrate database URLs

        open http://localhost:5999/searchreplacedb2.php
        ## specify CLEARDB database connection info
        ## replace HEROKUAPPURL with HEROKUPRODUCTIONAPPURL

    NOTE! If you need to push database changes to production, sync your
    development database first, verify it on the staging environment, and
    be careful not to overwrite live data. Use the maintenance mode, for example:

        heroku maintenance:on --app HEROKUPRODUCTIONAPPNAME

INITIAL IMPORT FROM LEGACY WORDPRESS INSTALLATION

    Create a new project, see above.

    Dump the database (at the server HOSTNAME)
        mysqldump -uxxx -pyyy DATABASENAME >~/DATABASENAME.sql

    Import to localhost (at the localhost)
        scp HOSTNAME:DATABASENAME.sql /tmp/
        mysql -uroot DATABASENAME </tmp/DATABASENAME.sql

    Migrata database URLs
        open http://localhost:5999/searchreplacedb2.php
        ## specify local database connection info
        ## replace LEGACYAPPURL with localhost:5000

    Copy the media assets, start the server and check that everything is ok
        scp -r HOSTNAME:/PATHTOWPISNTALLATION/wp-content/uploads config/public/wp-content/
        php -S localhost:5000 -t config/public
        open http://localhost:5000/wp-admin

    Upload pre-existing uploads (if any) from wp-content/uploads
    to the S3 BUCKETNAME/PROJECTNAME/staging directory. Use separate S3 client.
    To access the S3 bucket, you need the aws key, secret and bucket name.
        mysql -uroot DATABASENAME -e 'select * from wp_options where option_name like "wpro-aws%"'

    Replace old absolute wp-content/uploads URLs in the database
        open http://localhost:5999/searchreplacedb2.php
        ## replace "localhost:5000/wp-content/uploads" with "BUCKETNAME/BUCKETPATH/staging"

    Remove uploads from local storage and verify that all images,
    attachments etc. work correctly.
        rm -rf config/public/wp-content/uploads
